buildscript {
    apply from: 'deps.gradle'

    repositories {
        jcenter()
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$versions.androidplugin"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        classpath "com.github.ben-manes:gradle-versions-plugin:$versions.versionsplugin"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$versions.navigation"
        classpath "com.jeppeman.globallydynamic.gradle:plugin:$versions.globallydynamic_gradle"
        classpath "com.google.firebase:firebase-crashlytics-gradle:$versions.crashlytics_gradle"
        classpath "com.google.gms:google-services:$versions.google_services"
        classpath "com.google.firebase:firebase-appdistribution-gradle:$versions.firebase_app_distribution"
    }
}

ext {
    minSdkVersion = 24
    targetSdkVersion = 30
    compileSdkVersion = 30
    androidVersionCode = 33
    androidVersionName = "1.4"
    sourceCompatibilityVersion = JavaVersion.VERSION_1_8
    targetCompatibilityVersion = JavaVersion.VERSION_1_8
    applicationIdBase = "com.jeppeman.jetpackplayground"
    testApplicationId = "${applicationIdBase}.test"
    testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    jvmTargetVersion = "1.8"
}

subprojects {
    afterEvaluate { project ->
        repositories {
            jcenter()
            google()
            mavenCentral()
            maven { url 'http://developer.huawei.com/repo' }
        }

        if (project.hasProperty('android')) {
            android {
                compileSdkVersion rootProject.ext.compileSdkVersion

                defaultConfig {
                    minSdkVersion rootProject.ext.minSdkVersion
                    targetSdkVersion rootProject.ext.targetSdkVersion
                    versionCode rootProject.ext.androidVersionCode
                    versionName rootProject.ext.androidVersionName
                    testApplicationId rootProject.ext.testApplicationId
                }

                compileOptions {
                    sourceCompatibility rootProject.ext.sourceCompatibilityVersion
                    targetCompatibility rootProject.ext.targetCompatibilityVersion
                }

                lintOptions {
                    abortOnError true
                }

                kotlinOptions {
                    jvmTarget = rootProject.ext.jvmTargetVersion
                }

                flavorDimensions 'packaging'

                productFlavors {
                    amazon {
                        dimension 'packaging'
                    }
                    galaxy {
                        dimension 'packaging'
                    }
                    gplay {
                        dimension 'packaging'
                    }
                    huawei {
                        dimension 'packaging'
                    }
                    firebase {
                        dimension 'packaging'
                        if (project.plugins.hasPlugin("com.google.firebase.appdistribution")) {
                            firebaseAppDistribution {
                                apkPath "${buildDir}/outputs/universal_apk/firebaseRelease/universal.apk"
                            }
                        }
                    }
                }
            }

            dependencies {
                deps[project.name].each { configuration, dependencies ->
                    dependencies.each { dependency ->
                        "${configuration}"(dependency)
                    }
                }
            }
        } else if (project.hasProperty('java')) {
            sourceCompatibility = rootProject.ext.sourceCompatibilityVersion
            targetCompatibility = rootProject.ext.targetCompatibilityVersion

            compileKotlin {
                kotlinOptions {
                    jvmTarget = rootProject.ext.jvmTargetVersion
                }
            }
            compileTestKotlin {
                kotlinOptions {
                    jvmTarget = rootProject.ext.jvmTargetVersion
                }
            }
            dependencies {
                deps[project.name].each { configuration, dependencies ->
                    dependencies.each { dependency ->
                        "${configuration}"(dependency)
                    }
                }
            }
        }
    }
}

apply plugin: "com.github.ben-manes.versions"

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
